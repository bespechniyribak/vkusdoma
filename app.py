import os
import sys
import fcntl
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.types import ReplyKeyboardMarkup
from aiogram.types import ReplyKeyboardRemove
from aiogram import executor
from logging import basicConfig, INFO
from aiogram.types import BotCommand
from data.config import ADMINS,DEFAULT_ADMINS
from handlers.user.catalog import process_catalog
from loader import db, bot
import handlers, requests
from handlers import dp
from handlers.user.menu import catalog, cart, delivery_status

LOCK_PATH = "/tmp/bot.lock"
DEFAULT_ADMINS = []  # –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤

bot = Bot(token='YOUR_BOT_TOKEN')
dp = Dispatcher(bot)


def acquire_lock():
    try:
        lock_fd = open(LOCK_PATH, 'w')
        fcntl.flock(lock_fd, fcntl.LOCK_EX | fcntl.LOCK_NB)
        return lock_fd
    except (OSError, IOError):
        print("Another instance of the bot is already running. Exiting.")
        sys.exit(1)


def release_lock(lock_fd):
    fcntl.flock(lock_fd, fcntl.LOCK_UN)
    lock_fd.close()


@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    print(message.chat.id)

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    if message.chat.id in DEFAULT_ADMINS:
        markup.row('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–ê–¥–º–∏–Ω')
    else:
        markup.row('–ù–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏')

    await message.answer('''–ü—Ä–∏–≤–µ—Ç, Hola, –ü—Ä–∏–≤—ñ—Ç  üëã
ü§ñ –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–∞–∫–∞–∑—É –≤—Å–µ–≥–æ –≤–∫—É—Å–Ω–æ–≥–æ –∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ VkusDoma

üõçÔ∏è –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –≤—ã–±—Ä–∞—Ç—å –∏—Ö, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /menu.
–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –≤–Ω–∏–∑—É –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏".

–°–∏–Ω—è—è –∫–Ω–æ–ø–∫–∞ —Å–ª–µ–≤–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫,
–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–π—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É —Å –ø–æ–∫—É–ø–∫–∞–º–∏ (–Ω–∞ –∞–π—Ñ–æ–Ω–∞—Ö –æ–Ω–∞ –∏–Ω–æ–≥–¥–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –≤–Ω–∏–∑—É
–∏ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ 4 –∫—Ä—É–∂–∫–∞ –≤ –Ω–∏–∂–Ω–µ–º –º–µ–Ω—é, —á—Ç–æ –Ω–µ –≤—Å–µ–≥–¥–∞ –æ—á–µ–≤–∏–¥–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)

‚ùì –ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ –Ω–∞–º, –¥–ª—è —ç—Ç–æ–≥–æ
–∂–º–∏—Ç–µ /sos –∏ —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ –æ —á–µ–º —É–≥–æ–¥–Ω–æ.

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤–æ –≤–∫—É—Å–Ω—ã–π –º–∏—Ä!''', reply_markup=markup)


@dp.message_handler(text=admin_message)
async def admin_mode(message: types.Message):
    status = True
    res = requests.post('https://chtb.onrender.com/bot/admins/', data={'user_id': message.from_user.id, 'status': status})
    await message.answer('–í–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º.',
                         reply_markup=ReplyKeyboardRemove())

@dp.message_handler(text=user_message)
async def user_mode(message: types.Message):
    status = False
    res = requests.post('https://chtb.onrender.com/bot/admins/', data={'user_id': message.from_user.id, 'status': status})
    await message.answer('–í–∫–ª—é—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º.',
                         reply_markup=ReplyKeyboardRemove())

@dp.message_handler(text=menu)
async def menu_handler(message: types.Message):
    markup = ReplyKeyboardMarkup(selective=True)
    markup.add(catalog)
    markup.add(cart)

    await process_catalog(message)
    await message.answer('–ú–µ–Ω—é –∫–∞—Ç–∞–ª–æ–≥', reply_markup=markup)


    # await bot.set_chat_menu_buttons(message.chat.id)


async def set_bot_commands():
    commands = [
        BotCommand(command="/menu", description="–í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã"),
        BotCommand(command="/cart", description="–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞"),
        BotCommand(command="/sos", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å"),
        BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞")
        # Add more commands as needed
    ]

    await bot.set_my_commands(commands)


async def on_startup(dp):
    basicConfig(level=INFO)
    await set_bot_commands()

pass
    finally:
        release_lock(lock_fd)

if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)
